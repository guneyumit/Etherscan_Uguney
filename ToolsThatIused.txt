Tools that are used in this framework:

1. Java - Programming Language for this testing framework
2. Maven - Build and Dependency Management tool
3. Page Object Model (POM) - Design pattern for Web Ui Testing that aims to group WebElements for each page
   in separate java classes :
    - RegisterPage : This class has the WebElement definitions with FindBy annotations that come from Selenium.
      PageFactory.initElements method is used in class constructor to initialize all webelements once they are invoked.
4. Dependencies in pom.xml :
    - Cucumber : Testing tool to create and implement a test framework that supports Behavioral Driven Development
      with the help of Gherkin language which is easy to be understood by ordinary users, customers etc.
      Gherkin is used in Feature files.
    - Selenium Library : This Library contains Selenium WebDriver and methods and waits in Web UI automation
    - WebDriverManager : This allows compatible webdrivers to be setup in the local machine easier
    - Junit : Normally a unit test framework but it allows us to create various test methods and write assertions
      in our framework
    - Java Faker : It helps us to generate random test data such as username, email, password

5. Plugins in Pom.xml :
    - Maven Surefire plugin : This plugin helps us to build and run our test suites/cases via Maven lifecycle
    - Maven Cucumber Reporting plugin : This plugin helps us to create reports for our test suites/cases as well.

6. RunTests package :
    - TestRunner class: In this class, we use some Cucumber tools to define this class as a test runner with some
     configurations like which tags in feature files to be run, dryRun or not. Also We make a connection between
     feature files and step definitions (test scripts) in separate java classes belonging to that feature files
     in accordance with Page Object Model.
    - FailedTestRunner class : This class is structured similar to TestRunner class, and it runs only test
    scenarios failed after TestRunner class is run.

7. steps package : The classes in this package is run by classes in Runners package
    - RegisterStepDefs class : This class contains actual test methods and their scripts for the steps in register.feature file.
    - setUp class : This class contains Before and After methods that will be run before and after all test methods such
    as when maximizing browser window, defining implicit wait and its timeout or quitting webdriver after all tests are done

8. Utilities package:
    - ConfigReader class: With help of the get method in this class, for example we get the browser type
      from one center and use it in our Driver class to create an instance of Selenium WebDriver
    - Driver class : We create a Singleton WebDriver by using get method in this class. While creating webdriver,
      We get the browser type from "Config.properties" file.
    - WebUtils : This class contains my custom methods used while automating Web UI tests.
                 This class has two custom methods that I wrote to generate username or
                 password in desired format or length with the help of Random class of Java

About Recaptcha : Normally, in QA environment, developers disable captcha when it comes to automation.
